{"version":3,"file":"static/js/199.bb6bc064.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","webpack://phonebook/./src/pages/Register/Register.module.css?12fc","pages/Register/Register.jsx","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled, { css } from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  padding: 0.3rem;\r\n  background-color: #f3d9b1;\r\n  border-radius: 5px;\r\n  width: fit-content;\r\n\r\n  ${(props) =>\r\n    props.$red &&\r\n    css`\r\n      color: #f7e2de;\r\n      background-color: #c33149;\r\n    `}\r\n\r\n  ${(props) =>\r\n    props.$circle &&\r\n    css`\r\n      border-radius: 100%;\r\n      width: 1.5rem;\r\n      height: 1.5rem;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    `}\r\n`;\r\n\r\nexport default Button;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"RegisterPage\":\"Register_RegisterPage__hc94v\",\"RegisterForm\":\"Register_RegisterForm__Z2Z9r\",\"SubmitButton\":\"Register_SubmitButton__qI2i+\",\"LoginRedirect\":\"Register_LoginRedirect__L7xkr\",\"LoginLink\":\"Register_LoginLink__LW9nB\"};","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { getCurrentUserOp, signupOp } from \"../../redux/operations\";\r\nimport { useEffect } from \"react\";\r\nimport { getUser } from \"../../redux/selectors\";\r\nimport { nanoid } from \"nanoid\";\r\nimport css from \"./Register.module.css\";\r\nimport Button from \"../../components/Button/Button\";\r\n\r\nconst Register = () => {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(getUser);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(e.target.elements);\r\n    let { name, email, password } = e.target.elements;\r\n    name = name.value;\r\n    email = email.value;\r\n    password = password.value;\r\n    dispatch(signupOp({ name, email, password }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user.token && user.name) {\r\n      navigate(\"/phonebook\");\r\n    }\r\n    if (user.token === null) {\r\n      return;\r\n    }\r\n    dispatch(getCurrentUserOp(user.token));\r\n  }, [user, navigate, dispatch]);\r\n\r\n  const nameId = nanoid();\r\n  const emailId = nanoid();\r\n  const passwordId = nanoid();\r\n  return user.name ? (\r\n    <h2>Redirecting...</h2>\r\n  ) : user.token ? (\r\n    <h2>Loading user data</h2>\r\n  ) : (\r\n    <div className={css.RegisterPage}>\r\n      <form onSubmit={handleSubmit} className={css.RegisterForm}>\r\n        <label htmlFor={nameId}>Name:</label>\r\n        <input type=\"text\" name=\"name\" required id={nameId} />\r\n        <label htmlFor={emailId}>E-mail:</label>\r\n        <input type=\"email\" name=\"email\" required id={emailId} />\r\n        <label htmlFor={passwordId}>Password:</label>\r\n        <input\r\n          type=\"password\"\r\n          name=\"password\"\r\n          pattern=\"^.{7,}$\"\r\n          title=\"Minimum 7 characters\"\r\n          required\r\n          id={passwordId}\r\n        />\r\n        <Button type=\"submit\" className={css.SubmitButton}>\r\n          Register\r\n        </Button>\r\n      </form>\r\n      <p className={css.LoginRedirect}>\r\n        Already have an account? Login{\" \"}\r\n        <Link className={css.LoginLink} to={`/login`}>\r\n          here\r\n        </Link>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Button","styled","_templateObject","_taggedTemplateLiteral","props","$red","css","_templateObject2","$circle","_templateObject3","dispatch","useDispatch","user","useSelector","getUser","navigate","useNavigate","useEffect","token","name","getCurrentUserOp","nameId","nanoid","emailId","passwordId","_jsx","children","_jsxs","className","onSubmit","e","preventDefault","console","log","target","elements","_e$target$elements","email","password","value","signupOp","htmlFor","type","required","id","pattern","title","Link","to","strings","raw","slice","Object","freeze","defineProperties","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}