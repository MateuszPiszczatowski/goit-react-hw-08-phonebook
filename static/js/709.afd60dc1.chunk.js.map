{"version":3,"file":"static/js/709.afd60dc1.chunk.js","mappings":"wIAEMA,EAASC,EAAAA,GAAAA,OAAaC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4HAMxB,SAACC,GAAK,OACNA,EAAMC,OACNC,EAAAA,EAAAA,IAAGC,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,sEAGF,IAED,SAACC,GAAK,OACNA,EAAMI,UACNF,EAAAA,EAAAA,IAAGG,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,wKAOF,IAGL,K,oIC1BA,EAA4B,yBAA5B,EAAiE,yBAAjE,EAAyG,4BAAzG,EAAwJ,gCAAxJ,EAAuM,4B,6BC4DvM,EApDc,WACZ,IAAMO,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,IAAYC,EAAAA,IACnBC,GAAWC,EAAAA,EAAAA,OAWjBC,EAAAA,EAAAA,YAAU,WACJL,EAAKM,OAASN,EAAKO,MACrBJ,EAAS,cAEQ,OAAfH,EAAKM,OAGTR,GAASU,EAAAA,EAAAA,IAAiBR,EAAKM,OACjC,GAAG,CAACN,EAAMG,EAAUL,IAEpB,IAAMW,GAAkBC,EAAAA,EAAAA,MAClBC,GAAeD,EAAAA,EAAAA,MAErB,OAAOV,EAAKO,MACVK,EAAAA,EAAAA,KAAA,MAAAC,SAAI,mBACFb,EAAKM,OACPM,EAAAA,EAAAA,KAAA,MAAAC,SAAI,uBAEJC,EAAAA,EAAAA,MAAA,OAAKC,UAAWrB,EAAcmB,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,QAAMC,UAAWrB,EAAesB,SA5Bf,SAACC,GACpBA,EAAEC,iBACFC,QAAQC,IAAIH,EAAEI,OAAOC,UACrB,IAAAC,EAA0BN,EAAEI,OAAOC,SAA7BE,EAAKD,EAALC,MAAOC,EAAQF,EAARE,SACbD,EAAQA,EAAME,MACdD,EAAWA,EAASC,MACpB5B,GAAS6B,EAAAA,EAAAA,IAAQ,CAAEH,MAAAA,EAAOC,SAAAA,IAC5B,EAqB2DZ,SAAA,EACrDD,EAAAA,EAAAA,KAAA,SAAOgB,QAASjB,EAAaE,SAAC,aAC9BD,EAAAA,EAAAA,KAAA,SAAOiB,KAAK,QAAQtB,KAAK,QAAQuB,UAAQ,EAACC,GAAIpB,KAC9CC,EAAAA,EAAAA,KAAA,SAAOgB,QAASnB,EAAgBI,SAAC,eACjCD,EAAAA,EAAAA,KAAA,SAAOiB,KAAK,WAAWtB,KAAK,WAAWuB,UAAQ,EAACC,GAAItB,KACpDG,EAAAA,EAAAA,KAACxB,EAAAA,EAAM,CAAC2B,UAAWrB,EAAkBmC,KAAK,SAAQhB,SAAC,eAIrDC,EAAAA,EAAAA,MAAA,KAAGC,UAAWrB,EAAqBmB,SAAA,CAAC,kCACF,KAChCD,EAAAA,EAAAA,KAACoB,EAAAA,GAAI,CAACC,GAAE,YAAelB,UAAWrB,EAAiBmB,SAAC,cAM5D,C,sBC3De,SAAStB,EAAuB2C,EAASC,GAItD,OAHKA,IACHA,EAAMD,EAAQE,MAAM,IAEfC,OAAOC,OAAOD,OAAOE,iBAAiBL,EAAS,CACpDC,IAAK,CACHT,MAAOW,OAAOC,OAAOH,MAG3B,C,uFCRO,IAkBIzB,EAAS,WAAH,IAAI8B,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OAC5BG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,SAAChB,EAAIiB,GAWvD,OAREjB,IAFFiB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGV,GAAG,GAAG,C","sources":["components/Button/Button.jsx","webpack://phonebook/./src/pages/Login/Login.module.css?b420","pages/Login/Login.jsx","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled, { css } from \"styled-components\";\r\n\r\nconst Button = styled.button`\r\n  padding: 0.3rem;\r\n  background-color: #f3d9b1;\r\n  border-radius: 5px;\r\n  width: fit-content;\r\n\r\n  ${(props) =>\r\n    props.$red &&\r\n    css`\r\n      color: #f7e2de;\r\n      background-color: #c33149;\r\n    `}\r\n\r\n  ${(props) =>\r\n    props.$circle &&\r\n    css`\r\n      border-radius: 100%;\r\n      width: 1.5rem;\r\n      height: 1.5rem;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    `}\r\n`;\r\n\r\nexport default Button;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"LoginPage\":\"Login_LoginPage__aaLot\",\"LoginForm\":\"Login_LoginForm__8D3dH\",\"SubmitButton\":\"Login_SubmitButton__vlRmO\",\"RegisterRedirect\":\"Login_RegisterRedirect__ZkPFX\",\"RegisterLink\":\"Login_RegisterLink__xmtxC\"};","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { getCurrentUserOp, loginOp } from \"../../redux/operations\";\r\nimport { useEffect } from \"react\";\r\nimport { getUser } from \"../../redux/selectors\";\r\nimport css from \"./Login.module.css\";\r\nimport { nanoid } from \"nanoid\";\r\nimport Button from \"../../components/Button/Button\";\r\n\r\nconst Login = () => {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(getUser);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(e.target.elements);\r\n    let { email, password } = e.target.elements;\r\n    email = email.value;\r\n    password = password.value;\r\n    dispatch(loginOp({ email, password }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user.token && user.name) {\r\n      navigate(\"/phonebook\");\r\n    }\r\n    if (user.token === null) {\r\n      return;\r\n    }\r\n    dispatch(getCurrentUserOp(user.token));\r\n  }, [user, navigate, dispatch]);\r\n\r\n  const passwordFieldId = nanoid();\r\n  const emailFieldId = nanoid();\r\n\r\n  return user.name ? (\r\n    <h2>Redirecting...</h2>\r\n  ) : user.token ? (\r\n    <h2>Loading user data</h2>\r\n  ) : (\r\n    <div className={css.LoginPage}>\r\n      <form className={css.LoginForm} onSubmit={handleSubmit}>\r\n        <label htmlFor={emailFieldId}>E-mail:</label>\r\n        <input type=\"email\" name=\"email\" required id={emailFieldId} />\r\n        <label htmlFor={passwordFieldId}>Password:</label>\r\n        <input type=\"password\" name=\"password\" required id={passwordFieldId} />\r\n        <Button className={css.SubmitButton} type=\"submit\">\r\n          Log in\r\n        </Button>\r\n      </form>\r\n      <p className={css.RegisterRedirect}>\r\n        Don't have an account? Register{\" \"}\r\n        <Link to={`/register`} className={css.RegisterLink}>\r\n          here\r\n        </Link>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Button","styled","_templateObject","_taggedTemplateLiteral","props","$red","css","_templateObject2","$circle","_templateObject3","dispatch","useDispatch","user","useSelector","getUser","navigate","useNavigate","useEffect","token","name","getCurrentUserOp","passwordFieldId","nanoid","emailFieldId","_jsx","children","_jsxs","className","onSubmit","e","preventDefault","console","log","target","elements","_e$target$elements","email","password","value","loginOp","htmlFor","type","required","id","Link","to","strings","raw","slice","Object","freeze","defineProperties","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}